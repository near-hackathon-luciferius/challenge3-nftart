{"version":3,"sources":["components/SignIn.jsx","layout.js","images/404.jpg","components/404.jsx","components/Dashboard.jsx","App.js","index.js","config.js"],"names":["SignIn","Layout","currentUser","signIn","signOut","id","pageWrapId","outerContainerId","className","to","onClick","floating","large","icon","fontSize","tooltip","accountId","NotFound","src","Image404","alt","width","style","margin","React","Component","Dashboard","version","answer","onSubmit","require","BOATLOAD_OF_GAS","Big","times","toFixed","App","contract","nearConfig","wallet","lastTransaction","provider","errorMessage","useState","decodeURI","setAnswer","useEffect","txHash","a","txStatus","result","receipts_outcome","outcome","logs","pop","get_last_message","account_id","getState","getLastRememberedMessage","window","history","pushState","location","origin","pathname","path","element","requestSignIn","contractId","contractName","methodNames","hello","name","replace","index","e","preventDefault","target","elements","fieldset","name_prompt","disabled","nativeEvent","submitter","value","then","focus","remember_me","getConfig","process","NEAR_ENV","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","balance","viewMethods","changeMethods","sender","connection","nearInitPromise","initContract","urlParams","URLSearchParams","search","has","get","ReactDOM","render","document","getElementById","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error"],"mappings":"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","file":"static/js/main.f8063d4a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function SignIn() {\n  return (\n    <>\n      <p>\n          This app demonstrates a key element of NEAR’s UX: once an app has\n          permission to make calls on behalf of a user (that is, once a user\n          signs in), the app can make calls to the blockchain for them without\n          prompting extra confirmation. So you’ll see that if you use the hello\n          button, you will get a response right away.\n      </p>\n      <p>\n          But if you do use the remember me button, then NEAR will double-check that\n          you’re ok with sending money to this app for remebering the name.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom'\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { Button } from 'react-materialize';\r\nimport PropTypes from 'prop-types';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport BrokenImageIcon from '@mui/icons-material/BrokenImage';\r\n\r\nconst Layout = ({currentUser, signIn, signOut}) => {\r\n  return (\r\n    <div id=\"App\">\r\n        <Menu pageWrapId={ \"page-wrapper\" } outerContainerId={ \"App\" }>\r\n          <Link className=\"menu-item\" to=\"/\">\r\n            Dashboard\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/collection\">\r\n            My Collection\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/marketplace\">\r\n            Discover\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/docs\">\r\n            Docs\r\n          </Link>\r\n        </Menu>\r\n        <main id=\"page-wrapper\">\r\n          <Outlet/>\r\n        </main>\r\n        { currentUser\r\n          ? <Button onClick={signOut} floating large className='btn-login' icon={<AccountBalanceWalletIcon fontSize=\"medium\" />} tooltip={'Log out ' + currentUser.accountId + '.'} />\r\n          : <Button onClick={signIn} floating large className='btn-login' icon={<BrokenImageIcon fontSize=\"medium\" />} tooltip='Log in using NEAR wallet.' />\r\n        }\r\n    </div>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  signIn: PropTypes.func.isRequired,\r\n  signOut: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Layout;","export default __webpack_public_path__ + \"static/media/404.6fa35088.jpg\";","import React from 'react'\r\nimport Image404 from '../images/404.jpg';\r\n\r\nclass NotFound extends React.Component {\r\n   render() {\r\n      return <img src={Image404} alt=\"Nothing is here.\" \r\n                  width='900'\r\n                  style={{margin:'10em'}}/>;\r\n   }\r\n}\r\nexport default NotFound;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Dashboard = ({version, answer, onSubmit, currentUser}) => {\r\n   return <>\r\n                 <header>\r\n                   <h1>NEAR Challenge #3 - NFT Art - {version}</h1>\r\n                 </header>      \r\n                 <h5>Head over to <Link className=\"menu-item\" to=\"/collection\">your collection</Link> \r\n                     to mint you first artwork or go to <Link className=\"menu-item\" to=\"/marketplace\">the marketplace</Link> to discover what others created.\r\n                 </h5>\r\n             </>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  version: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Dashboard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport SignIn from './components/SignIn';\nimport Layout from './layout';\nimport NotFound from './components/404.jsx';\nimport Dashboard from './components/Dashboard.jsx';\nimport 'materialize-css/dist/css/materialize.css'\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom'\nvar version = require('../package.json').version;\nrequire('materialize-css');\n\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nconst App = ({ contract, currentUser, nearConfig, wallet, lastTransaction, provider, errorMessage }) => {\n  const [answer, setAnswer] = useState(errorMessage ? decodeURI(errorMessage) : currentUser ? \"Thinking please wait...\" : \"Please login first.\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fieldset, name_prompt } = e.target.elements;\n\n    fieldset.disabled = true;\n    //Big(donation.value || '0').times(10 ** 24).toFixed()\n    if (e.nativeEvent.submitter.value === 'hello') {        \n        contract.hello(\n          { name: name_prompt.value },\n          BOATLOAD_OF_GAS,\n          0\n        ).then((answer) => {\n          fieldset.disabled = false;\n          name_prompt.value = '';\n          name_prompt.focus();\n          setAnswer(answer);\n        });\n    }\n    else {\n        contract.remember_me(\n          { name: name_prompt.value },\n          BOATLOAD_OF_GAS,\n          Big('0.00045').times(10 ** 24).toFixed()\n        ).then((answer) => {\n          fieldset.disabled = false;\n          name_prompt.value = '';\n          name_prompt.focus();\n          setAnswer(answer);\n        });\n    }\n  };\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.hello.name]}, //contract requesting access\n      'NEAR Challenge #3 - NFT Art', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n  \n  useEffect(() => {\n      if (currentUser && lastTransaction && !errorMessage) {\n          getState(lastTransaction, currentUser.accountId);\n      }\n      else if (currentUser && !errorMessage){\n          getLastRememberedMessage(currentUser.accountId);\n      }\n      window.history.pushState({}, \"\", window.location.origin + window.location.pathname);\n\n      async function getState(txHash, accountId) {\n        const result = await provider.txStatus(txHash, accountId);\n        setAnswer(result.receipts_outcome[0].outcome.logs.pop());\n      }\n      \n      async function getLastRememberedMessage(accountId) {\n        const result = await contract.get_last_message({ account_id: accountId });\n        setAnswer(result);\n      }\n  }, [currentUser, errorMessage, lastTransaction, contract, provider]);\n  \n\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout currentUser={currentUser} signIn={signIn} signOut={signOut}/>}>\n        <Route index element={\n          currentUser\n            ? <Dashboard version={version} onSubmit={onSubmit} currentUser={currentUser} answer={answer}/>\n            : <SignIn/>\n        }/>\n        <Route path=\"*\" element={<NotFound/>}/>\n      </Route>\n    </Routes>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    hello: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  \n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['get_last_message'],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['hello', 'remember_me'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  \n  const provider = near.connection.provider;\n  \n  return { contract, currentUser, nearConfig, walletConnection, provider };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection, provider }) => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let lastTransaction;\n    if(urlParams.has('transactionHashes')){\n        lastTransaction = urlParams.get('transactionHashes');\n    }\n    let errorMessage;\n    if(urlParams.has('errorMessage')){\n        errorMessage = urlParams.get('errorMessage');\n    }\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n          lastTransaction={lastTransaction}\n          provider={provider}\n          errorMessage={errorMessage}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'hello.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n"],"sourceRoot":""}