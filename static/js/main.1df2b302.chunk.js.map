{"version":3,"sources":["config.js","components/SignIn.jsx","layout.js","images/404.jpg","components/404.jsx","components/Dashboard.jsx","components/Form.jsx","components/Collection.jsx","App.js","index.js"],"names":["CONTRACT_NAME","process","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","SignIn","Layout","currentUser","signIn","signOut","id","pageWrapId","outerContainerId","className","to","onClick","floating","large","icon","fontSize","tooltip","accountId","NotFound","src","Image404","alt","width","style","margin","React","Component","Dashboard","version","Form","onNftMint","errorMessage","onSubmit","autoComplete","autoFocus","label","required","type","small","require","BOATLOAD_OF_GAS","Big","times","toFixed","VALID_EXTENSIONS","App","contract","nearConfig","wallet","provider","useState","setErrorMessage","e","a","preventDefault","target","elements","fieldset","file_chooser","title_prompt","description_prompt","disabled","file","files","uploadedFileExt","name","split","pop","toLowerCase","includes","join","MAX_SIZE","size","arrayBuffer","content","mime","storeNFT","File","value","result","imageUrl","data","image","href","replace","console","log","nft_mint","token_owner_id","token_metadata","title","description","media","media_hash","copies","issued_at","Date","now","toString","then","_","focus","nftstorage","NFTStorage","token","store","path","element","requestSignIn","contractId","methodNames","hello","window","location","origin","pathname","index","Collection","getConfig","NEAR_ENV","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","balance","viewMethods","changeMethods","sender","connection","nearInitPromise","initContract","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1df2b302.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nftart.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n","import React from 'react';\n\nexport default function SignIn() {\n  return (\n    <>\n      <p>\n          This app demonstrates a key element of NEAR’s UX: once an app has\n          permission to make calls on behalf of a user (that is, once a user\n          signs in), the app can make calls to the blockchain for them without\n          prompting extra confirmation. So you’ll see that if you use the hello\n          button, you will get a response right away.\n      </p>\n      <p>\n          But if you do use the remember me button, then NEAR will double-check that\n          you’re ok with sending money to this app for remebering the name.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom'\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { Button } from 'react-materialize';\r\nimport PropTypes from 'prop-types';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport BrokenImageIcon from '@mui/icons-material/BrokenImage';\r\n\r\nconst Layout = ({currentUser, signIn, signOut}) => {\r\n  return (\r\n    <div id=\"App\">\r\n        <Menu pageWrapId={ \"page-wrapper\" } outerContainerId={ \"App\" }>\r\n          <Link className=\"menu-item\" to=\"/\">\r\n            Dashboard\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/collection\">\r\n            My Collection\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/marketplace\">\r\n            Discover\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/docs\">\r\n            Docs\r\n          </Link>\r\n        </Menu>\r\n        <main id=\"page-wrapper\">\r\n          <Outlet/>\r\n        </main>\r\n        { currentUser\r\n          ? <Button onClick={signOut} floating large className='btn-login' icon={<AccountBalanceWalletIcon fontSize=\"medium\" />} tooltip={'Log out ' + currentUser.accountId + '.'} />\r\n          : <Button onClick={signIn} floating large className='btn-login' icon={<BrokenImageIcon fontSize=\"medium\" />} tooltip='Log in using NEAR wallet.' />\r\n        }\r\n    </div>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  signIn: PropTypes.func.isRequired,\r\n  signOut: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Layout;","export default __webpack_public_path__ + \"static/media/404.6fa35088.jpg\";","import React from 'react'\r\nimport Image404 from '../images/404.jpg';\r\n\r\nclass NotFound extends React.Component {\r\n   render() {\r\n      return <img src={Image404} alt=\"Nothing is here.\" \r\n                  width='900'\r\n                  style={{margin:'10em'}}/>;\r\n   }\r\n}\r\nexport default NotFound;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Dashboard = ({version, currentUser}) => {\r\n   return <>\r\n                 <header>\r\n                   <h1>NEAR Challenge #3 - NFT Art - {version}</h1>\r\n                 </header>      \r\n                 <h5>Head over to <Link className=\"menu-item\" to=\"/collection\">your collection</Link> \r\n                     to mint you first artwork or go to <Link className=\"menu-item\" to=\"/marketplace\">the marketplace</Link> to discover what others created.\r\n                 </h5>\r\n             </>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  version: PropTypes.string.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, TextInput } from 'react-materialize';\n\nexport default function Form({ onNftMint, errorMessage }) {\n  return (\n    <form onSubmit={onNftMint}>\n      <fieldset id=\"fieldset\">\n        <p>Choose an image file below. Accepted are .png and .jpeg images only. The maximum file size is 3MB.</p>\n        { errorMessage && <div className=\"error\"> { errorMessage } </div> }\n        <p className=\"highlight\">\n          <TextInput\n            autoComplete=\"off\"\n            autoFocus\n            id=\"title_prompt\"\n            className=\"name_input\"\n            label=\"The title of the image.\"\n            required\n          />\n        </p>\n        <p className=\"highlight\">\n          <TextInput\n            autoComplete=\"off\"\n            autoFocus\n            id=\"description_prompt\"\n            className=\"name_input\"\n            label=\"A short description of the image.\"\n            required\n          />\n        </p>\n        <p className=\"highlight\">\n          <input type=\"file\" id=\"file_chooser\" />\n        </p>\n        <Button type=\"submit\" small\n                tooltip=\"Mints the chosen image as a NFT.\">\n          Mint!\n        </Button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onNftMint: PropTypes.func.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from './Form';\r\n\r\nconst Dashboard = ({currentUser, onNftMint, errorMessage}) => {\r\n   return <>\r\n                 <header>\r\n                   <h1>{currentUser.accountId}'s Collection</h1>\r\n                 </header>\r\n                 <h5>Mint a new NFT below.</h5>\r\n                 <Form onNftMint={onNftMint} errorMessage={errorMessage} />\r\n          </>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  onNftMint: PropTypes.func.isRequired,\r\n  errorMessage: PropTypes.string.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\nimport { NFTStorage, File } from 'nft.storage';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport SignIn from './components/SignIn';\nimport Layout from './layout';\nimport NotFound from './components/404.jsx';\nimport Dashboard from './components/Dashboard.jsx';\nimport Collection from './components/Collection.jsx';\nimport 'materialize-css/dist/css/materialize.css'\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom'\nvar version = require('../package.json').version;\nrequire('materialize-css');\n\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\nconst NFT_STORAGE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDc2NjhmOTg1OUYxYjZGNTRkRjk0YUMyM2U4RDk4OTE1QkQyQTg2MTciLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MDUxNTU2NTA1MywibmFtZSI6Im5mdF9taW50In0.95zdADQVUy5zLpoe1kGV_ZiNvH2vlFIvC-h3CsMJEO8'\nconst VALID_EXTENSIONS = [\"png\", \"jpg\", \"jpeg\"];\nconst MAX_SIZE = 3;\n\nconst App = ({ contract, currentUser, nearConfig, wallet, provider }) => {\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const onNftMint = async (e) => {\n    e.preventDefault();\n\n    const { fieldset, file_chooser, title_prompt, description_prompt } = e.target.elements;\n    \n    fieldset.disabled = true;\n    setErrorMessage('');\n    \n    let file = file_chooser.files[0];\n    \n    if (!file){\n        setErrorMessage('No file was chosen.');\n        fieldset.disabled = false;\n        return\n    }\n    \n    const uploadedFileExt = file.name\n        .split('.')\n        .pop()\n        .toLowerCase()\n    const isValidFileExt = VALID_EXTENSIONS.includes(uploadedFileExt)\n\n    if (!isValidFileExt) {\n        setErrorMessage(`Must upload a file of type: ${VALID_EXTENSIONS.join(' or ')}`);\n        fieldset.disabled = false;\n        return\n    }\n    \n    const maxBytes = MAX_SIZE * 1024 * 1024;\n\n    if (file.size > maxBytes) {\n        setErrorMessage(`File size must be less than ${MAX_SIZE} MB.`);\n        fieldset.disabled = false;\n        return\n    }\n    \n    const content = await file.arrayBuffer();\n    const mime = file.type;    \n    const result = await storeNFT(new File([content], file.name, { mime }), title_prompt.value, description_prompt.value);\n    const imageUrl = result.data.image.href.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");    \n    \n    console.log(imageUrl);\n    \n    contract.nft_mint(\n      { \n        token_owner_id: currentUser.accountId,\n        token_metadata: {\n                            title: title_prompt.value,\n                            description: description_prompt.value,\n                            media: imageUrl,\n                            media_hash: 'RTBEMDBDNjZGODk1RTlEOEEyMTQzNjUyRjlCMUJGNEQ1MEU2NjQxNEM0RUI5NDQzMzdGRTcwMTk5NDFEMjkzQQ==', //fixed for now\n                            copies: 1,\n                            issued_at: Date.now().toString()\n                        }\n      },\n      BOATLOAD_OF_GAS,\n      Big('0.1').times(10 ** 24).toFixed()\n    ).then((_) => {\n      fieldset.disabled = false;\n      title_prompt.value = '';\n      description_prompt.value = '';\n      title_prompt.focus();\n    });\n    \n    //Show images with Spinn loader: https://stackoverflow.com/questions/56902522/react-show-loading-spinner-while-images-load\n    //https://reactgo.com/react-display-loading-screen/\n  };\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.hello.name]}, //contract requesting access\n      'NEAR Challenge #3 - NFT Art', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n  \n  \n\n    /**\n      * Reads an image file from `image` and stores an NFT with the given name and description.\n      * @param {string} image the file object of an image file\n      * @param {string} name a name for the NFT\n      * @param {string} description a text description for the NFT\n      */\n    const storeNFT = async (image, name, description) => {\n        //TODO convert file to byte array\n        // create a new NFTStorage client using our API key\n        const nftstorage = new NFTStorage({ token: NFT_STORAGE_KEY })\n\n        // call client.store, passing in the image & metadata\n        return nftstorage.store({\n            image,\n            name,\n            description,\n        })\n    }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout currentUser={currentUser} signIn={signIn} signOut={signOut}/>}>\n        <Route index element={\n          currentUser\n            ? <Dashboard version={version} currentUser={currentUser}/>\n            : <SignIn/>\n        }/>\n        <Route path=\"collection\" element={\n          currentUser\n            ? <Collection onNftMint={onNftMint} currentUser={currentUser} errorMessage={errorMessage}/>\n            : <SignIn/>\n        }/>\n        <Route path=\"*\" element={<NotFound/>}/>\n      </Route>\n    </Routes>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    nft_mint: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  \n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: [],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['nft_mint'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  \n  const provider = near.connection.provider;\n  \n  return { contract, currentUser, nearConfig, walletConnection, provider };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection, provider }) => {\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n          provider={provider}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n"],"sourceRoot":""}