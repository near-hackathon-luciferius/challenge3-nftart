{"version":3,"sources":["config.js","components/SignIn.jsx","components/Popup.jsx","layout.js","images/404.jpg","components/404.jsx","components/Dashboard.jsx","components/Form.jsx","components/Collection.jsx","components/Marketplace.jsx","App.js","index.js"],"names":["CONTRACT_NAME","process","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","SignIn","signIn","small","onClick","Popup","props","className","handleClose","content","Layout","currentUser","signOut","clearMessage","message","id","pageWrapId","outerContainerId","to","floating","large","icon","fontSize","tooltip","accountId","NotFound","src","Image404","alt","width","style","margin","React","Component","Dashboard","version","Form","onNftMint","errorMessage","onSubmit","autoComplete","autoFocus","label","required","type","Collection","contract","useState","nfts","setNfts","useEffect","a","nft_supply_for_owner","account_id","count","nft_tokens_for_owner","from_index","limit","parseInt","result","console","log","splitArrayIntoChunksOfLen","fetchData","arr","len","chunks","i","n","length","push","slice","map","chunk","nft","metadata","media","title","description","Marketplace","nft_total_supply","nft_tokens","require","BOATLOAD_OF_GAS","Big","times","toFixed","VALID_EXTENSIONS","App","nearConfig","wallet","lastTransaction","provider","error","setErrorMessage","setMessage","e","preventDefault","target","elements","fieldset","file_chooser","title_prompt","description_prompt","disabled","file","files","uploadedFileExt","name","split","pop","toLowerCase","includes","join","MAX_SIZE","size","arrayBuffer","mime","storeNFT","File","value","imageUrl","data","image","href","replace","nft_mint","token_owner_id","token_metadata","media_hash","copies","issued_at","Date","now","toString","then","_","focus","decodeURI","window","history","pushState","location","origin","pathname","requestSignIn","contractId","methodNames","nftstorage","NFTStorage","token","store","path","element","index","getConfig","NEAR_ENV","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","balance","viewMethods","changeMethods","sender","connection","nearInitPromise","initContract","urlParams","URLSearchParams","search","has","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32169b47.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nftart.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n","import React from 'react';\nimport { Button } from 'react-materialize';\n\nexport default function SignIn({signIn}) {\n  return (\n    <>\n      <header>\n                   <h1>NFTArt Homepage</h1>\n      </header>\n      <Button small onClick={signIn}>Log in</Button>\n      <p>\n          This app demonstrates how to mint nfts in with the NEAR blockchain. While minting\n          the app will ask you to deposite 0.1 NEAR but it acutally only uses roughly 0.01 NEAR.\n          The remaining NEAR that is not used gets refunded on completing the smart contrat call.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\r\n\r\nconst Popup = props => {\r\n  return (\r\n    <div className=\"popup-box\">\r\n      <div className=\"box\">\r\n        <span className=\"close-icon\" onClick={props.handleClose}>x</span>\r\n        {props.content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;","import React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom'\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { Button } from 'react-materialize';\r\nimport PropTypes from 'prop-types';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport BrokenImageIcon from '@mui/icons-material/BrokenImage';\r\nimport Popup from './components/Popup';\r\n\r\nconst Layout = ({currentUser, signIn, signOut, clearMessage, message}) => {\r\n  return (\r\n    <div id=\"App\">\r\n        <Menu pageWrapId={ \"page-wrapper\" } outerContainerId={ \"App\" }>\r\n          <Link className=\"menu-item\" to=\"/\">\r\n            Dashboard\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/collection\">\r\n            My Collection\r\n          </Link>\r\n\r\n          <Link className=\"menu-item\" to=\"/marketplace\">\r\n            Marketplace\r\n          </Link>\r\n        </Menu>\r\n        <main id=\"page-wrapper\">\r\n          <Outlet/>\r\n        </main>\r\n        { currentUser\r\n          ? <Button onClick={signOut} floating large className='btn-login' icon={<AccountBalanceWalletIcon fontSize=\"medium\" />} tooltip={'Log out ' + currentUser.accountId + '.'} />\r\n          : <Button onClick={signIn} floating large className='btn-login' icon={<BrokenImageIcon fontSize=\"medium\" />} tooltip='Log in using NEAR wallet.' />\r\n        }        \r\n        {message && <Popup\r\n          content={<>\r\n            <b>A message for you</b>\r\n            <p>{message}</p>\r\n          </>}\r\n          handleClose={clearMessage}\r\n        />}\r\n    </div>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  signIn: PropTypes.func.isRequired,\r\n  signOut: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Layout;","export default __webpack_public_path__ + \"static/media/404.6fa35088.jpg\";","import React from 'react'\r\nimport Image404 from '../images/404.jpg';\r\n\r\nclass NotFound extends React.Component {\r\n   render() {\r\n      return <img src={Image404} alt=\"Nothing is here.\" \r\n                  width='900'\r\n                  style={{margin:'10em'}}/>;\r\n   }\r\n}\r\nexport default NotFound;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Dashboard = ({version, currentUser}) => {\r\n   return <>\r\n                 <header>\r\n                   <h1>NEAR Challenge #3 - NFT Art - {version}</h1>\r\n                 </header>\r\n                  <p>\r\n                      This app demonstrates how to mint nfts in with the NEAR blockchain. While minting\r\n                      the app will ask you to deposite 0.1 NEAR but it acutally only uses roughly 0.01 NEAR.\r\n                      The remaining NEAR that is not used gets refunded on completing the smart contrat call.\r\n                  </p>\r\n                  <p>\r\n                      The basic idea was to create a DeviantArt for the NEAR chain. So everyone can mint their\r\n                      own artworks and through the marketplace they can then buy physical and digital products\r\n                      from the minted NFTs. This includes, but is not limited to, buying rights to use the images\r\n                      on their websites. The information, who has rights could be stored in the metadata of the NFTs.\r\n                      This site yould then provide tools to check whether a specific webpage has the rights to use\r\n                      the artwork.\r\n                  </p>\r\n                 <h5>Head over to <Link className=\"menu-item\" to=\"/collection\">your collection</Link> to mint \r\n                     you first artwork or go to <Link className=\"menu-item\" to=\"/marketplace\">the marketplace</Link> to\r\n                     discover what others created.\r\n                 </h5>\r\n             </>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  version: PropTypes.string.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, TextInput } from 'react-materialize';\n\nexport default function Form({ onNftMint, errorMessage }) {\n  return (\n    <form onSubmit={onNftMint}>\n      <fieldset id=\"fieldset\">\n        <p>Choose an image file below. Accepted are .png and .jpeg images only. The maximum file size is 3MB.</p>\n        { errorMessage && <div className=\"error\"> { errorMessage } </div> }\n        <p className=\"highlight\">\n          <TextInput\n            autoComplete=\"off\"\n            autoFocus\n            id=\"title_prompt\"\n            className=\"name_input\"\n            label=\"The title of the image.\"\n            required\n          />\n        </p>\n        <p className=\"highlight\">\n          <TextInput\n            autoComplete=\"off\"\n            autoFocus\n            id=\"description_prompt\"\n            className=\"name_input\"\n            label=\"A short description of the image.\"\n            required\n          />\n        </p>\n        <p className=\"highlight\">\n          <input type=\"file\" id=\"file_chooser\" />\n        </p>\n        <Button type=\"submit\" small\n                tooltip=\"Mints the chosen image as a NFT.\">\n          Mint!\n        </Button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onNftMint: PropTypes.func.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n};","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from './Form';\r\n\r\nconst Collection = ({currentUser, onNftMint, errorMessage, contract}) => {\r\n    const [nfts, setNfts] = useState([]);\r\n  \r\n  useEffect(() => {\r\n      async function fetchData() {\r\n        const count = await contract.nft_supply_for_owner({account_id: currentUser.accountId});\r\n        const result = await contract.nft_tokens_for_owner(\r\n        {\r\n            account_id: currentUser.accountId,\r\n            from_index: \"0\",\r\n            limit: parseInt(count)\r\n        });\r\n        console.log(result);\r\n        setNfts(splitArrayIntoChunksOfLen(result, 3));\r\n      }\r\n      \r\n      fetchData();\r\n  }, [contract, currentUser]);\r\n  \r\n  const splitArrayIntoChunksOfLen = (arr, len) => {\r\n    var chunks = [], i = 0, n = arr.length;\r\n    while (i < n) {\r\n      chunks.push(arr.slice(i, i += len));\r\n    }\r\n    return chunks;\r\n  }\r\n  \r\n   return <>\r\n                 <header>\r\n                   <h1>{currentUser.accountId}'s Collection</h1>\r\n                 </header>\r\n                 \r\n                  {nfts.map(chunk => \r\n                  <div className=\"row\">\r\n                    {chunk.map(nft =>\r\n                      <div className=\"col s4\">\r\n                          <div className=\"card\">\r\n                            <div className=\"card-image\">\r\n                              <img src={nft.metadata.media} alt={nft.metadata.title}/>\r\n                            </div>\r\n                            <div className=\"card-title\">{nft.metadata.title}</div>\r\n                            <div className=\"card-content\">\r\n                              <p>{nft.metadata.description}</p>\r\n                            </div>\r\n                          </div>\r\n                      </div>)}          \r\n                  </div>)}\r\n                 <h5>Mint a new NFT below.</h5>\r\n                 <Form onNftMint={onNftMint} errorMessage={errorMessage} />\r\n          </>\r\n}\r\n\r\nCollection.propTypes = {\r\n  onNftMint: PropTypes.func.isRequired,\r\n  errorMessage: PropTypes.string.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Collection;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Marketplace = ({currentUser, contract}) => {\r\n    const [nfts, setNfts] = useState([]);\r\n  \r\n  useEffect(() => {\r\n      async function fetchData() {\r\n          const count = await contract.nft_total_supply();\r\n          const result = await contract.nft_tokens(\r\n          {\r\n              from_index: \"0\",\r\n              limit: parseInt(count)\r\n          });\r\n          console.log(result);\r\n          setNfts(splitArrayIntoChunksOfLen(result, 3));\r\n      }\r\n      \r\n      fetchData();\r\n  }, [contract, currentUser]);\r\n  \r\n  const splitArrayIntoChunksOfLen = (arr, len) => {\r\n    var chunks = [], i = 0, n = arr.length;\r\n    while (i < n) {\r\n      chunks.push(arr.slice(i, i += len));\r\n    }\r\n    return chunks;\r\n  }\r\n  \r\n   return <>\r\n                 <header>\r\n                   <h1>All NFTs that where minted.</h1>\r\n                 </header>\r\n                 \r\n                  {nfts.map(chunk => \r\n                  <div className=\"row\">\r\n                    {chunk.map(nft =>\r\n                      <div className=\"col s4\">\r\n                          <div className=\"card\">\r\n                            <div className=\"card-image\">\r\n                              <img src={nft.metadata.media} alt={nft.metadata.title}/>\r\n                            </div>\r\n                            <div className=\"card-title\">{nft.metadata.title}</div>\r\n                            <div className=\"card-content\">\r\n                              <p>{nft.metadata.description}</p>\r\n                            </div>\r\n                          </div>\r\n                      </div>)}          \r\n                  </div>)}\r\n          </>\r\n}\r\n\r\nMarketplace.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  contract: PropTypes.shape({\r\n    nft_total_supply: PropTypes.func.isRequired,\r\n    nft_tokens: PropTypes.func.isRequired\r\n  }).isRequired,\r\n};\r\n\r\nexport default Marketplace;","import React, { useState, useEffect } from 'react';\nimport { NFTStorage, File } from 'nft.storage';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport SignIn from './components/SignIn';\nimport Layout from './layout';\nimport NotFound from './components/404.jsx';\nimport Dashboard from './components/Dashboard.jsx';\nimport Collection from './components/Collection.jsx';\nimport Marketplace from './components/Marketplace.jsx';\nimport 'materialize-css/dist/css/materialize.css'\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom'\nvar version = require('../package.json').version;\nrequire('materialize-css');\n\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\nconst NFT_STORAGE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDc2NjhmOTg1OUYxYjZGNTRkRjk0YUMyM2U4RDk4OTE1QkQyQTg2MTciLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MDUxNTU2NTA1MywibmFtZSI6Im5mdF9taW50In0.95zdADQVUy5zLpoe1kGV_ZiNvH2vlFIvC-h3CsMJEO8'\nconst VALID_EXTENSIONS = [\"png\", \"jpg\", \"jpeg\"];\nconst MAX_SIZE = 3;\n\nconst App = ({ contract, currentUser, nearConfig, wallet, provider, lastTransaction, error }) => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [message, setMessage] = useState('');\n\n  const onNftMint = async (e) => {\n    e.preventDefault();\n\n    const { fieldset, file_chooser, title_prompt, description_prompt } = e.target.elements;\n    \n    fieldset.disabled = true;\n    setErrorMessage('');\n    \n    let file = file_chooser.files[0];\n    \n    if (!file){\n        setErrorMessage('No file was chosen.');\n        fieldset.disabled = false;\n        return\n    }\n    \n    const uploadedFileExt = file.name\n        .split('.')\n        .pop()\n        .toLowerCase()\n    const isValidFileExt = VALID_EXTENSIONS.includes(uploadedFileExt)\n\n    if (!isValidFileExt) {\n        setErrorMessage(`Must upload a file of type: ${VALID_EXTENSIONS.join(' or ')}`);\n        fieldset.disabled = false;\n        return\n    }\n    \n    const maxBytes = MAX_SIZE * 1024 * 1024;\n\n    if (file.size > maxBytes) {\n        setErrorMessage(`File size must be less than ${MAX_SIZE} MB.`);\n        fieldset.disabled = false;\n        return\n    }\n    \n    const content = await file.arrayBuffer();\n    const mime = file.type;    \n    const result = await storeNFT(new File([content], file.name, { mime }), title_prompt.value, description_prompt.value);\n    const imageUrl = result.data.image.href.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    \n    contract.nft_mint(\n      { \n        token_owner_id: currentUser.accountId,\n        token_metadata: {\n                            title: title_prompt.value,\n                            description: description_prompt.value,\n                            media: imageUrl,\n                            media_hash: 'RTBEMDBDNjZGODk1RTlEOEEyMTQzNjUyRjlCMUJGNEQ1MEU2NjQxNEM0RUI5NDQzMzdGRTcwMTk5NDFEMjkzQQ==', //fixed for now\n                            copies: 1,\n                            issued_at: Date.now().toString()\n                        }\n      },\n      BOATLOAD_OF_GAS,\n      Big('0.1').times(10 ** 24).toFixed()\n    ).then((_) => {\n      fieldset.disabled = false;\n      title_prompt.value = '';\n      description_prompt.value = '';\n      title_prompt.focus();\n    });\n  };\n  \n  useEffect(() => {\n      if (error){\n        setMessage(decodeURI(error));\n      }\n      else if (lastTransaction) {          \n          setMessage(`Successfully minted the NFT in transaction ${lastTransaction}`);\n      }\n      window.history.pushState({}, \"\", window.location.origin + window.location.pathname);\n  }, [lastTransaction, error]);\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.nft_mint.name]}, //contract requesting access\n      'NEAR Challenge #3 - NFT Art', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n\n  const clearMessage = () => {\n    setMessage('');\n  };\n\n  /**\n    * Reads an image file from `image` and stores an NFT with the given name and description.\n    * @param {string} image the file object of an image file\n    * @param {string} name a name for the NFT\n    * @param {string} description a text description for the NFT\n    */\n  const storeNFT = async (image, name, description) => {\n      //TODO convert file to byte array\n      // create a new NFTStorage client using our API key\n      const nftstorage = new NFTStorage({ token: NFT_STORAGE_KEY })\n      \n       // call client.store, passing in the image & metadata\n      return nftstorage.store({\n          image,\n          name,\n          description,\n      })\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout currentUser={currentUser} signIn={signIn} signOut={signOut} clearMessage={clearMessage} message={message}/>}>\n        <Route index element={\n          currentUser\n            ? <Dashboard version={version} currentUser={currentUser}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"collection\" element={\n          currentUser\n            ? <Collection onNftMint={onNftMint} currentUser={currentUser} errorMessage={errorMessage} contract={contract}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"marketplace\" element={\n          currentUser\n            ? <Marketplace currentUser={currentUser} contract={contract}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"*\" element={<NotFound/>}/>\n      </Route>\n    </Routes>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    nft_mint: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  \n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['nft_supply_for_owner', 'nft_tokens_for_owner', 'nft_total_supply', 'nft_tokens'],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['nft_mint'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  \n  const provider = near.connection.provider;\n  \n  return { contract, currentUser, nearConfig, walletConnection, provider };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection, provider }) => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let lastTransaction;\n    if(urlParams.has('transactionHashes')){\n        lastTransaction = urlParams.get('transactionHashes');\n    }\n    let errorMessage;\n    if(urlParams.has('errorMessage')){\n        errorMessage = urlParams.get('errorMessage');\n    }\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n          lastTransaction={lastTransaction}\n          provider={provider}\n          error={errorMessage}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n"],"sourceRoot":""}